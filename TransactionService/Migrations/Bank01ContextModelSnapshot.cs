// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TransactionService.Migrations;

#nullable disable

namespace TransactionService.Migrations
{
    [DbContext(typeof(Bank01Context))]
    partial class Bank01ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TransactionService.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Amount")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeTransactionId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.ToTable("Transaction");

                    b.HasData(
                        new
                        {
                            TransactionId = 2,
                            AccountId = 1,
                            Amount = 8798.13m,
                            TransactionDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeTransactionId = 1
                        },
                        new
                        {
                            TransactionId = 1,
                            AccountId = 1,
                            Amount = 8798.13m,
                            TransactionDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeTransactionId = 1
                        });
                });

            modelBuilder.Entity("TransactionService.Models.TypeTransaction", b =>
                {
                    b.Property<int>("TypeTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeTransactionId"));

                    b.Property<string>("TypeTransactionName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("TypeTransactionId");

                    b.ToTable("TypeTransaction");

                    b.HasData(
                        new
                        {
                            TypeTransactionId = 1,
                            TypeTransactionName = "Depósito"
                        },
                        new
                        {
                            TypeTransactionId = 2,
                            TypeTransactionName = "Saque"
                        },
                        new
                        {
                            TypeTransactionId = 3,
                            TypeTransactionName = "Saldo"
                        },
                        new
                        {
                            TypeTransactionId = 4,
                            TypeTransactionName = "Pix"
                        },
                        new
                        {
                            TypeTransactionId = 5,
                            TypeTransactionName = "Transferência"
                        },
                        new
                        {
                            TypeTransactionId = 6,
                            TypeTransactionName = "Pagamento"
                        },
                        new
                        {
                            TypeTransactionId = 7,
                            TypeTransactionName = "Recarga de Celular"
                        },
                        new
                        {
                            TypeTransactionId = 8,
                            TypeTransactionName = "Comprovantes"
                        },
                        new
                        {
                            TypeTransactionId = 9,
                            TypeTransactionName = "Extrato Simples"
                        },
                        new
                        {
                            TypeTransactionId = 10,
                            TypeTransactionName = "Extrato por Período"
                        },
                        new
                        {
                            TypeTransactionId = 11,
                            TypeTransactionName = "Bloqueio de Conta"
                        },
                        new
                        {
                            TypeTransactionId = 12,
                            TypeTransactionName = "Desbloqueio de Conta"
                        },
                        new
                        {
                            TypeTransactionId = 13,
                            TypeTransactionName = "Alteração de Limite Diário"
                        },
                        new
                        {
                            TypeTransactionId = 14,
                            TypeTransactionName = "Cancelamento de Conta"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
